#!/usr/bin/env ruby
# encoding: utf-8
require 'nokogiri'
require 'cgi'
require 'yaml'
require 'uri'
require 'optparse'


options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: goog [options] [query]"
  opts.on("-h", "--help", "Show this message") { 
    require 'goog'
    puts <<END
#{opts}
DATE RANGE options for -d option:
    h   last hour
    d   last day (24 hours)
    w   last week
    m   last month
    y   last year

goog #{Goog::VERSION}
http://github.com/danchoi/goog
Author: Daniel Choi <dhchoi@gmail.com>
END
    exit 
  }
  opts.on("-d", '--date-range [DATE RANGE]', 'Show results for date range. See below for options.') {|dr| options[:date_range] = dr }
  opts.on("-n", '--num-pages [NUM PAGES]', 'Show NUM PAGES pages of results') {|pages| options[:pages] = pages.to_i }
  opts.on("-c", '--color', 'Force color output') {options[:color] = true}
  opts.on("-v", '--vim', 'Open results in Vim and bind <leader>o to open URL on or after cursor') {
    require 'tempfile'
    options[:vim] = true
    $vimscript_file = File.expand_path(File.join(File.dirname(__FILE__), '..', 'vim', 'goog.vim'))
    $tempfile = Tempfile.new('goog')
    $stdout = $tempfile
  }
end.parse!
query = ARGV.join(' ')
unless query
  abort "Please provide a search query"
end

unless `which tidy` =~ /tidy/
  abort "No tidy found. Please install tidy."
end
if RUBY_VERSION !~ /^1.9/
  abort "Requires Ruby 1.9"
end
query = "/search?q=#{CGI.escape query}"
if options[:date_range]
  query += "&as_qdr=#{options[:date_range]}"
end
(1..(options[:pages] || 1)).each do |page| 
  if query.nil?
    exit
  end
  curl = "curl -s -A Mozilla 'http://www.google.com#{query}' | tidy --wrap 0 -indent -ashtml --merge-divs yes 2>/dev/null"
  resp = %x{#{curl}}
  doc = Nokogiri::HTML resp, nil, 'iso-8859-1'
  doc.search('ol li.g').each_with_index {|li, index|
    next unless li.at('h3 a')
    href = li.at('h3 a')['href']
    link = ((h = href[/^\/url\?q=([^&]+)/, 1]) && URI.unescape(h)) || href
    if link !~ /^https?:/
      link = "http://google.com#{link}"
    end
    title = li.at('h3 a').inner_text
    description = li.at('div.s')
    excerpt = if description
                description.search('span').remove 
                excerpt = begin 
                  s = description.inner_text.strip
                  s.gsub(/\s{2,}/, ' ')
                rescue
                  puts "ERROR"
                  puts description
                  puts $!
                end
              end
    number = (page - 1) * 10 + (index + 1)
    res = if !options[:vim] && (STDOUT.tty? || options[:color])
      ["#{number}. \e[36m#{title}\e[0m", excerpt, "\e[35m#{link }\e[0m"]
    else
      ["#{number}. #{title}", excerpt, link]
    end
    $stdout.puts res.compact
    $stdout.puts
  }

  # find next page link
  # <a href="/search?q=why+the+lucky+stiff&amp;hl=en&amp;ie=UTF-8&amp;prmd=ivns&amp;ei=K6akT9bRBeaM6QHjifmwBA&amp;start=10&amp;sa=N" style="text-align:left"><span style="display:block;margin-left:53px">Next</span></a>

  next_page_href = (nextspan = doc.at("//span[contains(child::text(),'Next')]")) && nextspan.parent[:href]
  query = next_page_href
end

if options[:vim]
  $stdout.close
  exec "vim -S #$vimscript_file #{$tempfile.path}"
end

